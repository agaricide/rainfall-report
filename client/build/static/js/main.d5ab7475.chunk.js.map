{"version":3,"sources":["icons/gps/gps-3.svg","icons/gps/gps-2.svg","components/About/agar.svg","icons/gps/gps-1.svg","components/CTA/CTA.tsx","components/Sensor/Interval.tsx","components/Sensor/Sensor.tsx","components/useGeolocation.ts","rainfall/types.ts","rainfall/fetchReport.ts","components/Header/Header.tsx","components/About/About.tsx","components/Footer/Footer.tsx","components/usePicoRouter.ts","components/App.tsx","rainfall/findNearestSensor.ts","serviceWorker.ts","parallax.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","CTA","React","memo","props","_useState","useState","_useState2","Object","slicedToArray","buttonState","setButtonState","handleMouseUp","document","removeEventListener","content","untouched","react_default","a","createElement","src","gps","active","gpsClicked","loading","className","onMouseDown","addEventListener","onClick","Interval","interval","display","Sensor","setInterval","latitude","longitude","url","concat","window","open","goToPoint","name","Sensor_Interval","defaults","timeout","enableHighAccuracy","start","coords","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","useGeolocation","position","setPosition","getCurrentPosition","options","Promise","resolve","reject","navigator","geolocation","objectSpread","_ref","asyncToGenerator","regenerator_default","mark","_callee","current","_args","arguments","wrap","_context","prev","next","length","undefined","sent","abrupt","stop","this","apply","toSensors","rows","map","row","station_name","parseFloat","sixHours","oneDay","sevenDays","thirtyDays","pastYear","lastModifed","update_time","fromReportRow","callback","result","sensors","axios","data","Header","goTo","About","href","agar","Footer","usePicoRouter","config","default","route","setRoute","handleBack","event","state","useEffect","fn","history","pushState","App","_usePicoRouter","_usePicoRouter2","_useGeolocation","_useGeolocation2","getPosition","setSensors","_useState3","_useState4","nearest","setNearest","_x","_fetchRainfallReport","fetchRainfallReport","then","handleClick","sensor","distance","Infinity","forEach","x","y","Math","sqrt","findNearestSensor","routes","components_Sensor_Sensor","find","components_CTA_CTA","about","components_About_About","components_Header_Header","components_Footer_Footer","Boolean","location","hostname","match","scalar","ReactDOM","render","src_components_App","getElementById","el","center","innerWidth","innerHeight","onmousemove","screenX","screenY","xOffset","yOffset","style","transform","parallax","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5ab7475.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gps-3.6b9ad439.svg\";","module.exports = __webpack_public_path__ + \"static/media/gps-2.6e4eb28d.svg\";","module.exports = __webpack_public_path__ + \"static/media/agar.d0b0ecec.svg\";","module.exports = __webpack_public_path__ + \"static/media/gps-1.219edb91.svg\";","import React, { useState } from 'react';\nimport './CTA.css';\nimport gps from '../../icons/gps/gps-1.svg';\nimport gpsClicked from '../../icons/gps/gps-3.svg';\n\ninterface CTAProps {\n    onClick: Function;\n}\n\ntype ButtonStates = 'untouched' | 'active' | 'loading';\n\nconst CTA = React.memo((props: CTAProps) => {\n  const [buttonState, setButtonState] = useState<ButtonStates>('untouched');\n\n  const handleMouseUp = () => {\n    setButtonState('loading');\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  const handleMouseDown = () => {\n    setButtonState('active');\n    document.addEventListener('mouseup', handleMouseUp);\n    props.onClick();\n  };\n\n  const content: { [key: string]: JSX.Element } = {\n    untouched: <span><img src={gps} /> find sensor</span>,\n    active: <span><img src={gpsClicked} /> find sensor</span>,\n    loading: <span><img className='loading' src={gps} /> find sensor</span>\n  };\n\n  return (\n    <section className='cta'>\n      <h1>\n        Use <b>gps</b> to find nearest <b>rainfall sensor</b>\n      </h1>\n      <button onMouseDown={handleMouseDown}>\n        {content[buttonState]}\n      </button>\n    </section>\n  );\n});\n\nexport default CTA;","import React from 'react';\nimport { RainfallInterval } from '../../rainfall/types';\n\ninterface IntervalProps {\n  onClick: Function;\n  interval: RainfallInterval;\n  display: string;\n}\n\nconst Interval = React.memo((props: IntervalProps) => {\n  return (\n    <li>\n      <a onClick={() => props.onClick(props.interval)}>\n        {props.display}\n      </a>\n    </li>\n  );\n});\n\nexport default Interval;","import React, { useState } from 'react';\nimport { SensorData, RainfallInterval } from '../../rainfall/types';\nimport Interval from './Interval';\nimport './Sensor.css';\nimport gps from '../../icons/gps/gps-2.svg';\n\nconst Sensor = (props: SensorData) => {\n  const [interval, setInterval] = useState<RainfallInterval>('sevenDays');\n\n  const goToPoint = (latitude: number, longitude: number) => {\n    const url = `https://www.google.com.sa/maps/search/${latitude},${longitude}`;\n    window.open(url, '_blank');\n  };\n\n  return (\n    <main className='report'>\n      <div className='location' onClick={() => goToPoint(props.latitude, props.longitude)}>\n        <span className='point'>\n          <img src={gps} />\n        </span>\n        {props.name}\n      </div>\n      <div className='rainfall'>\n        {props[interval] || '0.0'}<span className='units'> in</span>\n      </div>\n      <ul className='intervals wide'>\n        <Interval display={'6hr'} interval={'sixHours'} onClick={setInterval} />\n        <Interval display={'24hr'} interval={'oneDay'} onClick={setInterval} />\n        <Interval display={'7d'} interval={'sevenDays'} onClick={setInterval} />\n        <Interval display={'1mo'} interval={'thirtyDays'} onClick={setInterval} />\n        <Interval display={'12mo'} interval={'pastYear'} onClick={setInterval} />\n      </ul>\n    </main>\n  );\n};\n\nexport default Sensor;","import { useState } from 'react';\n\ntype GeolocationHook = [Position, (options?: PositionOptions) => Promise<Position>];\n\nconst defaults: PositionOptions = {\n  timeout: 1000 * 60 * 10,\n  enableHighAccuracy: true\n};\n\nconst start: Position = {\n  coords: {\n    accuracy: 0,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: 0,\n    longitude: 0,\n    speed: null\n  },\n  timestamp: 0\n};\n\nconst useGeolocation = (): GeolocationHook => {\n  const [position, setPosition] = useState<Position>(start);\n\n  const getCurrentPosition = (options: PositionOptions) => new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject, { ...options, ...defaults });\n  });\n\n  const fetchPosition = async (options: PositionOptions = {}) => {\n    const current = await getCurrentPosition(options) as Position;\n    setPosition(current);\n    return position;\n  };\n\n  return [position, fetchPosition];\n};\n\nexport default useGeolocation;","export interface SensorData {\n  name?: string;\n  latitude: number;\n  longitude: number;\n  sixHours?: number;\n  oneDay?: number;\n  sevenDays?: number;\n  thirtyDays?: number;\n  pastYear?: number;\n  lastModifed?: string;\n}\n\nexport type RainfallInterval = 'sixHours' | 'oneDay' | 'sevenDays' | 'thirtyDays' | 'pastYear';\n\nexport function toSensors(rows: any[]): SensorData[] {\n  return rows.map(row => fromReportRow(row));\n}\n\nfunction fromReportRow(row: any): SensorData {\n  return {\n    name: row.station_name,\n    latitude: parseFloat(row.latitude),\n    longitude: parseFloat(row.longitude),\n    sixHours: parseFloat(row['_6_hours']),\n    oneDay: parseFloat(row['_1_day']),\n    sevenDays: parseFloat(row['_7_days']),\n    thirtyDays: parseFloat(row['_30_days']),\n    pastYear: parseFloat(row['past_year']),\n    lastModifed: row.update_time\n  };\n}","import axios from 'axios';\nimport { SensorData, toSensors } from './types';\n\ntype Callback = (sensors: SensorData[]) => void;\n\nexport async function fetchRainfallReport(callback?: Callback): Promise<SensorData[]> {\n  const result = await axios('api/report');\n  const sensors = toSensors(result.data);\n  if (callback) callback(sensors);\n  return sensors;\n}\n","import React from 'react';\nimport './Header.css';\nimport gps from '../../icons/gps/gps-1.svg';\n\ninterface HeaderProps {\n  goTo: (view: string) => any;\n}\n\nconst Header = React.memo((props: HeaderProps) => {\n  return (\n    <header>\n      <a className='logo' onClick={() => props.goTo('find')}>\n        Dallas Rain Report\n      </a>\n      <nav>\n        <ul className='views'>\n          <li>\n            <a onClick={() => props.goTo('find')}>\n              Report\n            </a>\n          </li>\n          <li>\n            <a onClick={() => props.goTo('about')}>\n              About\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n});\n\nexport default Header;","import React from 'react';\nimport './About.css';\nimport agar from './agar.svg';\n\nconst OPEN_DATA = 'https://www.dallasopendata.com/Environment/Rainfall-Report/jus4-wys9';\nconst GH = 'https://github.com/agaricide';\n\nconst About = React.memo(() => {\n  return (\n    <section className='about'>\n      <p>\n        Made with <b>love</b> by <b>agar<span className='tm'>&trade;</span></b> using the free <b>\n        <a href={OPEN_DATA}>OpenData Rainfall Report.</a></b>\n      </p>\n      <p>\n        <b>Dallas</b> places sensors throughout <b>the City </b>\n        to measure rainfall. This data provides readings in a variety of\n        increments to inform <b>the citizenry</b> of rainfall\n        rates/amounts, by location, within an elapsed time span.\n      </p>\n      <p>\n        This information is provided with the understanding that it is\n        <b> not guaranteed</b> to be<b> correct or complete</b> and\n        conclusions drawn from such information are the sole responsibility\n        of <b>the Citizen</b>.\n      </p>\n      <a href={GH}>\n        <img src={agar} />\n      </a>\n    </section>\n  );\n});\n\nexport default About;","import React from 'react';\nimport './Footer.css';\nimport gps from '../../icons/gps/gps-2.svg';\n\ninterface FooterProps {\n  coords: Coordinates;\n}\n\nconst Footer = React.memo((props: FooterProps) => {\n  return (\n    <footer>\n      {/* <img src={gps} /> */}\n      <span className='coordinate latitude'>\n        {props.coords.latitude || '0.00'}\n      </span>\n      <span className='coordinate latitude'>\n        {props.coords.longitude || '0.00'}\n      </span>\n    </footer>\n  );\n});\n\nexport default Footer;","import { useState, useEffect } from 'react';\n\nexport type PicoRouterHook = [string, (route: string) => void];\n\nexport interface Routes {\n  [route: string]: JSX.Element;\n}\n\nexport interface RouterConfig {\n  default: string;\n}\n\nconst usePicoRouter = (config: RouterConfig): PicoRouterHook => {\n  const [route, setRoute] = useState<string>(config.default);\n\n  const handleBack = (event: PopStateEvent) => {\n    if (event.state) setRoute(event.state.route);\n  };\n\n  useEffect(() => {\n    window.addEventListener('popstate', handleBack);\n    return function cleanup() {\n      window.removeEventListener('popstate', handleBack);\n    };\n  });\n\n  const withHistory = (fn: Function) => (route: string) => {\n    history.pushState({ route }, `${route} page`, `#/${route}`);\n    fn(route);\n  };\n\n  return [route, withHistory(setRoute)];\n};\n\nexport default usePicoRouter;\n","import React, { useEffect, useState } from 'react';\nimport CTA from './CTA/CTA';\nimport Sensor from './Sensor/Sensor';\nimport useGeolocation from './useGeolocation';\nimport { fetchRainfallReport } from '../rainfall/fetchReport';\nimport { findNearestSensor } from '../rainfall/findNearestSensor';\nimport { SensorData } from '../rainfall/types';\nimport Header from './Header/Header';\nimport About from './About/About';\nimport Footer from './Footer/Footer';\nimport './App.css';\nimport usePicoRouter, { Routes } from './usePicoRouter';\n\nconst App = () => {\n  const [route, setRoute] = usePicoRouter({ default: 'find' });\n  const [position, getPosition] = useGeolocation();\n  const [sensors, setSensors] = useState<SensorData[]>([]);\n  const [nearest, setNearest] = useState<SensorData>({\n    latitude: 0,\n    longitude: 0\n  });\n\n  useEffect(() => {\n    fetchRainfallReport().then(setSensors);\n  }, []);\n\n  const handleClick = async () => {\n    await getPosition();\n    setRoute('sensor');\n  };\n\n  const sensor = findNearestSensor(position.coords, sensors);\n  if (sensor !== nearest) setNearest(sensor);\n\n  const routes: Routes = {\n    sensor: <Sensor {...nearest}></Sensor>,\n    find: <CTA onClick={handleClick}></CTA>,\n    about: <About></About>\n  };\n\n  return (\n    <div className='app'>\n      <Header goTo={setRoute}></Header>\n      {routes[route]}\n      <Footer coords={position.coords}></Footer>\n    </div>\n  );\n};\n\nexport default App;","import { SensorData } from './types';\n\nexport function findNearestSensor(coords: Coordinates, sensors: SensorData[]) {\n    const nearest = { sensor: sensors[0], distance: Infinity };\n\n    sensors.forEach(sensor => {\n      const x = sensor.longitude - coords.longitude;\n      const y = sensor.latitude - coords.latitude;\n      const distance = Math.sqrt((x * x) + (y * y));\n      if (distance < nearest.distance) {\n        nearest.distance = distance;\n        nearest.sensor = sensor;\n      }\n    });\n\n    return nearest.sensor;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const scalar = 1 / 150;\n\nexport function addEffect(el: HTMLElement | null): void {\n  if (!el) throw('No element specifed.');\n\n  const center = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2,\n  };\n\n  window.onmousemove = ({ screenX, screenY }) => {\n    const xOffset = (center.x - screenX) * scalar;\n    const yOffset = (center.y - screenY) * scalar;\n    el.style.transform = `translate3d(${xOffset}px, ${yOffset}px, 0)`;\n  };\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport * as parallax from './parallax';\n\nReactDOM.render(<App />, document.getElementById('root'));\nparallax.addEffect(document.getElementById('background'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}